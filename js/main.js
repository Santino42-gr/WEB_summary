/*
========================================
MAIN JAVASCRIPT - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
========================================
–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–µ–±-—Ä–µ–∑—é–º–µ
*/

// ===== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

class WebResumeApp {
    constructor() {
        this.components = {};
        this.isInitialized = false;
        this.config = {
            apiBaseUrl: window.location.hostname === 'localhost' 
                ? 'http://localhost:3001/api' 
                : 'https://your-vercel-app.vercel.app/api',
            animationSpeed: 300,
            chatTypingDelay: 1000
        };
        
        this.init();
    }

    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebResumeApp...');
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => this.initializeApp());
            } else {
                this.initializeApp();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }
    }

    async initializeApp() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await this.initializeComponents();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            this.initializeLibraries();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadData();
            
            this.isInitialized = true;
            console.log('‚úÖ WebResumeApp —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
            this.hideLoadingIndicator();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
        }
    }

    async initializeComponents() {
        console.log('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        this.components.navigation = new NavigationComponent();
        
        // RAG –ß–∞—Ç
        this.components.ragChat = new RAGChatComponent(this.config.apiBaseUrl);
        
        // –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        this.components.multiagentViz = new MultiagentVisualization();
        
        // AI Readiness Checklist
        this.components.aiReadiness = new AIReadinessChecklist();
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        this.components.projectsManager = new ProjectsManager();
        
        // –ù–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        this.components.skillsManager = new SkillsManager();
        
        // –£—Ç–∏–ª–∏—Ç—ã
        this.components.utils = new UtilsHelper();
    }

    setupEventListeners() {
        // Smooth scrolling –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('a[href^="#"]').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const target = document.querySelector(link.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º
        const contactForm = document.getElementById('contact-form');
        if (contactForm) {
            contactForm.addEventListener('submit', this.handleContactForm.bind(this));
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        window.addEventListener('error', this.handleGlobalError.bind(this));
        window.addEventListener('unhandledrejection', this.handleUnhandledRejection.bind(this));
    }

    initializeLibraries() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AOS (Animate On Scroll)
        if (typeof AOS !== 'undefined') {
            AOS.init({
                duration: 800,
                easing: 'ease-out',
                once: true,
                offset: 100
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Lucide –∏–∫–æ–Ω–∫–∏
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }

    async loadData() {
        console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            const knowledgeBase = await this.loadJSON('/data/knowledge-base.json');
            if (knowledgeBase) {
                this.components.ragChat.setKnowledgeBase(knowledgeBase);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
            const projects = await this.loadJSON('/data/projects.json');
            if (projects) {
                this.components.projectsManager.setProjects(projects);
                this.components.projectsManager.render();
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤—ã–∫–∏
            const skills = await this.loadJSON('/data/skills.json');
            if (skills) {
                this.components.skillsManager.setSkills(skills);
                this.components.skillsManager.render();
            }

        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            this.loadDemoData();
        }
    }

    async loadJSON(url) {
        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return await response.json();
        } catch (error) {
            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${url}:`, error);
            return null;
        }
    }

    loadDemoData() {
        console.log('üé≠ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...');
        
        // –î–µ–º–æ –ø—Ä–æ–µ–∫—Ç—ã
        const demoProjects = [
            {
                id: 1,
                title: "RAG Chat System",
                subtitle: "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç",
                description: "–°–∏—Å—Ç–µ–º–∞ —á–∞—Ç-–±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
                technologies: ["Python", "LangChain", "OpenAI", "FastAPI"],
                github: "https://github.com/example/rag-chat",
                demo: "https://rag-chat-demo.vercel.app",
                featured: true
            },
            {
                id: 2,
                title: "ML Pipeline Automation",
                subtitle: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ML –ø–∞–π–ø–ª–∞–π–Ω",
                description: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –¥–µ–ø–ª–æ—è –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º",
                technologies: ["MLFlow", "Docker", "Kubernetes", "Python"],
                github: "https://github.com/example/ml-pipeline",
                featured: true
            }
        ];

        this.components.projectsManager.setProjects(demoProjects);
        this.components.projectsManager.render();

        // –î–µ–º–æ –Ω–∞–≤—ã–∫–∏
        const demoSkills = [
            {
                category: "AI & Machine Learning",
                icon: "brain",
                skills: [
                    { name: "Python", level: "–≠–∫—Å–ø–µ—Ä—Ç", progress: 95 },
                    { name: "LangChain", level: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", progress: 85 },
                    { name: "OpenAI API", level: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", progress: 90 },
                    { name: "Transformers", level: "–°—Ä–µ–¥–Ω–∏–π", progress: 75 }
                ]
            },
            {
                category: "Frontend Development",
                icon: "code",
                skills: [
                    { name: "JavaScript", level: "–≠–∫—Å–ø–µ—Ä—Ç", progress: 90 },
                    { name: "React", level: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", progress: 85 },
                    { name: "Vue.js", level: "–°—Ä–µ–¥–Ω–∏–π", progress: 70 },
                    { name: "CSS/SCSS", level: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", progress: 88 }
                ]
            }
        ];

        this.components.skillsManager.setSkills(demoSkills);
        this.components.skillsManager.render();
    }

    async handleContactForm(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData);

        try {
            this.showLoadingIndicator();
            
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            console.log('üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
            
            // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            this.showSuccess('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            e.target.reset();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        } finally {
            this.hideLoadingIndicator();
        }
    }

    handleGlobalError(event) {
        console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
        this.showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    }

    handleUnhandledRejection(event) {
        console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π promise:', event.reason);
        this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }

    showLoadingIndicator() {
        const indicator = document.getElementById('loading-indicator');
        if (indicator) {
            indicator.classList.remove('hidden');
        }
    }

    hideLoadingIndicator() {
        const indicator = document.getElementById('loading-indicator');
        if (indicator) {
            indicator.classList.add('hidden');
        }
    }

    showError(message) {
        const notification = document.getElementById('error-notification');
        if (notification) {
            const messageEl = notification.querySelector('.error-message');
            if (messageEl) {
                messageEl.textContent = message;
            }
            notification.classList.remove('hidden');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                notification.classList.add('hidden');
            }, 5000);
        }
    }

    showSuccess(message) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        const notification = document.createElement('div');
        notification.className = 'error-notification';
        notification.style.backgroundColor = 'var(--success)';
        notification.innerHTML = `
            <div class="error-content">
                <i data-lucide="check-circle" class="error-icon"></i>
                <span class="error-message">${message}</span>
                <button class="error-close">
                    <i data-lucide="x"></i>
                </button>
            </div>
        `;

        document.body.appendChild(notification);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        notification.querySelector('.error-close').addEventListener('click', () => {
            notification.remove();
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 3000);
    }
}

// ===== –ö–û–ú–ü–û–ù–ï–ù–¢ –ù–ê–í–ò–ì–ê–¶–ò–ò =====

class NavigationComponent {
    constructor() {
        this.navToggle = document.querySelector('.nav-toggle');
        this.navMenu = document.querySelector('.nav-menu');
        this.navLinks = document.querySelectorAll('.nav-link');
        
        this.init();
    }

    init() {
        if (this.navToggle && this.navMenu) {
            this.navToggle.addEventListener('click', this.toggleMobileMenu.bind(this));
        }

        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
        this.updateActiveLink();
        window.addEventListener('scroll', this.updateActiveLink.bind(this));
    }

    toggleMobileMenu() {
        this.navMenu.classList.toggle('open');
        this.navToggle.classList.toggle('open');
        this.navToggle.setAttribute('aria-expanded', 
            this.navMenu.classList.contains('open'));
    }

    updateActiveLink() {
        const sections = document.querySelectorAll('section[id]');
        const scrollPosition = window.scrollY + 100;

        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.offsetHeight;
            const sectionId = section.getAttribute('id');

            if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
                this.navLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('href') === `#${sectionId}`) {
                        link.classList.add('active');
                    }
                });
            }
        });
    }
}

// ===== RAG CHAT –ö–û–ú–ü–û–ù–ï–ù–¢ (–∑–∞–≥–ª—É—à–∫–∞) =====

class RAGChatComponent {
    constructor(apiBaseUrl) {
        this.apiBaseUrl = apiBaseUrl;
        this.knowledgeBase = null;
        this.chatMessages = document.getElementById('chat-messages');
        this.chatInput = document.getElementById('chat-input');
        this.sendButton = document.getElementById('chat-send-btn');
        this.suggestions = document.querySelectorAll('.chat-suggestion');
        
        this.init();
    }

    init() {
        if (this.sendButton) {
            this.sendButton.addEventListener('click', this.sendMessage.bind(this));
        }

        if (this.chatInput) {
            this.chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });
        }

        this.suggestions.forEach(suggestion => {
            suggestion.addEventListener('click', () => {
                const question = suggestion.getAttribute('data-question');
                if (question && this.chatInput) {
                    this.chatInput.value = question;
                    this.sendMessage();
                }
            });
        });
    }

    setKnowledgeBase(knowledgeBase) {
        this.knowledgeBase = knowledgeBase;
    }

    async sendMessage() {
        const message = this.chatInput?.value.trim();
        if (!message) return;

        this.addMessage(message, 'user');
        this.chatInput.value = '';
        this.showTypingIndicator();

        try {
            const response = await this.generateResponse(message);
            this.hideTypingIndicator();
            this.addMessage(response, 'assistant');
        } catch (error) {
            this.hideTypingIndicator();
            this.addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'assistant');
            console.error('–û—à–∏–±–∫–∞ RAG —á–∞—Ç–∞:', error);
        }
    }

    async generateResponse(message) {
        // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        const demoResponses = {
            'llm': '–Ø —Ä–∞–±–æ—Ç–∞—é —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ LLM: GPT-4, Claude, Mistral. –°–æ–∑–¥–∞–≤–∞–ª —á–∞—Ç-–±–æ—Ç—ã –∏ RAG-—Å–∏—Å—Ç–µ–º—ã.',
            'rag': 'RAG (Retrieval-Augmented Generation) - —ç—Ç–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—á–µ—Ç–∞–µ—Ç –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–æ–≤. –Ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –µ—ë –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.',
            '—Å—Ç–µ–∫': '–ú–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫: Python, JavaScript, React, FastAPI, LangChain, OpenAI API, Docker.'
        };

        const lowerMessage = message.toLowerCase();
        for (const [key, response] of Object.entries(demoResponses)) {
            if (lowerMessage.includes(key)) {
                return response;
            }
        }

        return '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ AI-—Ä–µ—à–µ–Ω–∏–π –∏ –±—É–¥—É —Ä–∞–¥ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –º–æ–µ–≥–æ –æ–ø—ã—Ç–∞.';
    }

    addMessage(content, sender) {
        if (!this.chatMessages) return;

        const messageEl = document.createElement('div');
        messageEl.className = `chat-message chat-message-enter ${sender === 'user' ? 'user' : ''}`;
        
        messageEl.innerHTML = `
            <div class="chat-message-avatar">${sender === 'user' ? '–í—ã' : 'AI'}</div>
            <div class="chat-message-content">
                <p>${content}</p>
                <div class="chat-message-time">${new Date().toLocaleTimeString()}</div>
            </div>
        `;

        this.chatMessages.appendChild(messageEl);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    showTypingIndicator() {
        if (!this.chatMessages) return;

        const typingEl = document.createElement('div');
        typingEl.className = 'chat-typing-indicator';
        typingEl.innerHTML = `
            <div class="chat-message-avatar">AI</div>
            <div class="chat-typing-dots">
                <div class="chat-typing-dot"></div>
                <div class="chat-typing-dot"></div>
                <div class="chat-typing-dot"></div>
            </div>
        `;

        this.chatMessages.appendChild(typingEl);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    hideTypingIndicator() {
        const typingIndicator = this.chatMessages?.querySelector('.chat-typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }
}

// ===== –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –î–†–£–ì–ò–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====

class MultiagentVisualization {
    constructor() {
        console.log('ü§ñ MultiagentVisualization –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö
    }
}

class AIReadinessChecklist {
    constructor() {
        console.log('‚úÖ AIReadinessChecklist –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö
    }
}

class ProjectsManager {
    constructor() {
        this.projects = [];
        this.container = document.querySelector('#projects .grid');
    }

    setProjects(projects) {
        this.projects = projects;
    }

    render() {
        if (!this.container || !this.projects.length) return;

        this.container.innerHTML = this.projects.map(project => `
            <div class="project-card" data-aos="fade-up">
                <div class="project-card-header">
                    <h3 class="project-card-title">${project.title}</h3>
                    <p class="project-card-subtitle">${project.subtitle}</p>
                </div>
                <p class="project-card-description">${project.description}</p>
                <div class="project-card-tech">
                    ${project.technologies.map(tech => `<span class="tech-tag">${tech}</span>`).join('')}
                </div>
                <div class="project-card-footer">
                    <div class="project-links">
                        ${project.github ? `<a href="${project.github}" class="project-link" target="_blank">
                            <i data-lucide="github"></i> GitHub
                        </a>` : ''}
                        ${project.demo ? `<a href="${project.demo}" class="project-link" target="_blank">
                            <i data-lucide="external-link"></i> Demo
                        </a>` : ''}
                    </div>
                </div>
            </div>
        `).join('');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }
}

class SkillsManager {
    constructor() {
        this.skills = [];
        this.container = document.getElementById('skills-container');
    }

    setSkills(skills) {
        this.skills = skills;
    }

    render() {
        if (!this.container || !this.skills.length) return;

        this.container.innerHTML = `
            <div class="skills-grid">
                ${this.skills.map(category => `
                    <div class="skill-category" data-aos="fade-up">
                        <h3 class="skill-category-title">
                            <i data-lucide="${category.icon}" class="skill-category-icon"></i>
                            ${category.category}
                        </h3>
                        <div class="skills-list">
                            ${category.skills.map(skill => `
                                <div class="skill-item">
                                    <div class="skill-info">
                                        <span class="skill-name">${skill.name}</span>
                                        <span class="skill-level">${skill.level}</span>
                                    </div>
                                    <div class="skill-progress">
                                        <div class="skill-progress-bar" style="width: ${skill.progress}%"></div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `).join('')}
            </div>
        `;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }
}

class UtilsHelper {
    constructor() {
        console.log('üõ†Ô∏è UtilsHelper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    static formatDate(date) {
        return new Intl.DateTimeFormat('ru-RU').format(new Date(date));
    }

    static debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    static throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.webResumeApp = new WebResumeApp();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.WebResumeComponents = {
    RAGChatComponent,
    MultiagentVisualization,
    AIReadinessChecklist,
    ProjectsManager,
    SkillsManager,
    UtilsHelper
};
