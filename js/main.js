/*
========================================
MAIN JAVASCRIPT - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
========================================
–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–µ–±-—Ä–µ–∑—é–º–µ
*/

// ===== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

class WebResumeApp {
    constructor() {
        this.components = {};
        this.isInitialized = false;
        this.config = {
            apiBaseUrl: window.location.hostname === 'localhost' 
                ? 'http://localhost:3001/api' 
                : 'https://your-vercel-app.vercel.app/api',
            animationSpeed: 300,
            chatTypingDelay: 1000
        };
        
        this.init();
    }

    async init() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebResumeApp...');
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => this.initializeApp());
            } else {
                this.initializeApp();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }
    }

    async initializeApp() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await this.initializeComponents();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            this.initializeLibraries();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadData();
            
            this.isInitialized = true;
            console.log('‚úÖ WebResumeApp —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
            this.hideLoadingIndicator();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
        }
    }

    async initializeComponents() {
        console.log('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        this.components.navigation = new NavigationComponent();
        
        // RAG –ß–∞—Ç
        this.components.ragChat = new RAGChatComponent(this.config.apiBaseUrl);
        
        // –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        this.components.multiagentViz = new MultiagentVisualization();
        
        // AI Readiness Checklist
        this.components.aiReadiness = new AIReadinessChecklist();
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        this.components.projectsManager = new ProjectsManager();
        
        // –ù–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        this.components.skillsManager = new SkillsManager();
        
        // –£—Ç–∏–ª–∏—Ç—ã
        this.components.utils = new UtilsHelper();
    }

    setupEventListeners() {
        // Smooth scrolling –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('a[href^="#"]').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const target = document.querySelector(link.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º
        const contactForm = document.getElementById('contact-form');
        if (contactForm) {
            contactForm.addEventListener('submit', this.handleContactForm.bind(this));
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        window.addEventListener('error', this.handleGlobalError.bind(this));
        window.addEventListener('unhandledrejection', this.handleUnhandledRejection.bind(this));
    }

    initializeLibraries() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AOS (Animate On Scroll)
        if (typeof AOS !== 'undefined') {
            AOS.init({
                duration: 800,
                easing: 'ease-out',
                once: true,
                offset: 100
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Lucide –∏–∫–æ–Ω–∫–∏
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }

    async loadData() {
        console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            const knowledgeBase = await this.loadJSON('./data/knowledge-base.json');
            if (knowledgeBase) {
                this.components.ragChat.setKnowledgeBase(knowledgeBase);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤...');
            const projects = await this.loadJSON('./data/projects.json');
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–æ–≤:', projects);
            
            if (projects) {
                console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
                this.components.projectsManager.setProjects(projects.projects);
                this.components.projectsManager.render();
            } else {
                console.error('‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º demo –¥–∞–Ω–Ω—ã–µ');
                this.loadDemoData();
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤—ã–∫–∏
            const skills = await this.loadJSON('./data/skills.json');
            if (skills) {
                this.components.skillsManager.setSkills(skills.skillCategories);
                this.components.skillsManager.render();
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            const suggestedQuestions = await this.loadJSON('./data/suggested-questions.json');
            if (suggestedQuestions) {
                this.components.ragChat.setSuggestedQuestions(suggestedQuestions);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ–∏—Å–∫–∞
            const searchIndex = await this.loadJSON('./data/search-index.json');
            if (searchIndex) {
                this.components.ragChat.setSearchIndex(searchIndex);
            }

            console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            this.loadDemoData();
        }
    }

    async loadJSON(url) {
        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return await response.json();
        } catch (error) {
            console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${url}:`, error);
            return null;
        }
    }

    loadDemoData() {
        console.log('üé≠ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...');
        
        // –î–µ–º–æ –ø—Ä–æ–µ–∫—Ç—ã
        const demoProjects = [
            {
                id: 1,
                title: "RAG Chat System",
                subtitle: "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç",
                description: "–°–∏—Å—Ç–µ–º–∞ —á–∞—Ç-–±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
                technologies: ["Python", "LangChain", "OpenAI", "FastAPI"],
                github: "https://github.com/example/rag-chat",
                demo: "https://rag-chat-demo.vercel.app",
                featured: true
            },
            {
                id: 2,
                title: "ML Pipeline Automation",
                subtitle: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ML –ø–∞–π–ø–ª–∞–π–Ω",
                description: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –¥–µ–ø–ª–æ—è –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º",
                technologies: ["MLFlow", "Docker", "Kubernetes", "Python"],
                github: "https://github.com/example/ml-pipeline",
                featured: true
            }
        ];

        this.components.projectsManager.setProjects(demoProjects);
        this.components.projectsManager.render();

        // –î–µ–º–æ –Ω–∞–≤—ã–∫–∏
        const demoSkills = [
            {
                category: "AI & Machine Learning",
                icon: "brain",
                skills: [
                    { name: "Python", level: "–≠–∫—Å–ø–µ—Ä—Ç", progress: 95 },
                    { name: "LangChain", level: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", progress: 85 },
                    { name: "OpenAI API", level: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", progress: 90 },
                    { name: "Transformers", level: "–°—Ä–µ–¥–Ω–∏–π", progress: 75 }
                ]
            },
            {
                category: "Frontend Development",
                icon: "code",
                skills: [
                    { name: "JavaScript", level: "–≠–∫—Å–ø–µ—Ä—Ç", progress: 90 },
                    { name: "React", level: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", progress: 85 },
                    { name: "Vue.js", level: "–°—Ä–µ–¥–Ω–∏–π", progress: 70 },
                    { name: "CSS/SCSS", level: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", progress: 88 }
                ]
            }
        ];

        this.components.skillsManager.setSkills(demoSkills);
        this.components.skillsManager.render();
    }

    async handleContactForm(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData);

        try {
            this.showLoadingIndicator();
            
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            console.log('üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
            
            // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            this.showSuccess('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            e.target.reset();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        } finally {
            this.hideLoadingIndicator();
        }
    }

    handleGlobalError(event) {
        console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
        this.showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
    }

    handleUnhandledRejection(event) {
        console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π promise:', event.reason);
        this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }

    showLoadingIndicator() {
        const indicator = document.getElementById('loading-indicator');
        if (indicator) {
            indicator.classList.remove('hidden');
        }
    }

    hideLoadingIndicator() {
        const indicator = document.getElementById('loading-indicator');
        if (indicator) {
            indicator.classList.add('hidden');
        }
    }

    showError(message) {
        const notification = document.getElementById('error-notification');
        if (notification) {
            const messageEl = notification.querySelector('.error-message');
            if (messageEl) {
                messageEl.textContent = message;
            }
            notification.classList.remove('hidden');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                notification.classList.add('hidden');
            }, 5000);
        }
    }

    showSuccess(message) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        const notification = document.createElement('div');
        notification.className = 'error-notification';
        notification.style.backgroundColor = 'var(--success)';
        notification.innerHTML = `
            <div class="error-content">
                <i data-lucide="check-circle" class="error-icon"></i>
                <span class="error-message">${message}</span>
                <button class="error-close">
                    <i data-lucide="x"></i>
                </button>
            </div>
        `;

        document.body.appendChild(notification);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        notification.querySelector('.error-close').addEventListener('click', () => {
            notification.remove();
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 3000);
    }
}

// ===== –ö–û–ú–ü–û–ù–ï–ù–¢ –ù–ê–í–ò–ì–ê–¶–ò–ò =====

class NavigationComponent {
    constructor() {
        this.navToggle = document.querySelector('.nav-toggle');
        this.navMenu = document.querySelector('.nav-menu');
        this.navLinks = document.querySelectorAll('.nav-link');
        
        this.init();
    }

    init() {
        if (this.navToggle && this.navMenu) {
            this.navToggle.addEventListener('click', this.toggleMobileMenu.bind(this));
        }

        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
        this.updateActiveLink();
        window.addEventListener('scroll', this.updateActiveLink.bind(this));
    }

    toggleMobileMenu() {
        this.navMenu.classList.toggle('open');
        this.navToggle.classList.toggle('open');
        this.navToggle.setAttribute('aria-expanded', 
            this.navMenu.classList.contains('open'));
    }

    updateActiveLink() {
        const sections = document.querySelectorAll('section[id]');
        const scrollPosition = window.scrollY + 100;

        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.offsetHeight;
            const sectionId = section.getAttribute('id');

            if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
                this.navLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('href') === `#${sectionId}`) {
                        link.classList.add('active');
                    }
                });
            }
        });
    }
}

// ===== RAG CHAT –ö–û–ú–ü–û–ù–ï–ù–¢ (–∑–∞–≥–ª—É—à–∫–∞) =====

class RAGChatComponent {
    constructor(apiBaseUrl) {
        this.apiBaseUrl = apiBaseUrl;
        this.knowledgeBase = null;
        this.chatMessages = document.getElementById('chat-messages');
        this.chatInput = document.getElementById('chat-input');
        this.sendButton = document.getElementById('chat-send-btn');
        this.suggestions = document.querySelectorAll('.chat-suggestion');
        
        this.init();
    }

    init() {
        if (this.sendButton) {
            this.sendButton.addEventListener('click', this.sendMessage.bind(this));
        }

        if (this.chatInput) {
            this.chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });
        }

        this.suggestions.forEach(suggestion => {
            suggestion.addEventListener('click', () => {
                const question = suggestion.getAttribute('data-question');
                if (question && this.chatInput) {
                    this.chatInput.value = question;
                    this.sendMessage();
                }
            });
        });
    }

    setKnowledgeBase(knowledgeBase) {
        this.knowledgeBase = knowledgeBase;
        console.log('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', knowledgeBase.documents?.length, '–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
    }

    setSuggestedQuestions(suggestedQuestions) {
        this.suggestedQuestions = suggestedQuestions;
        this.updateSuggestedQuestions();
        console.log('‚ùì –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:', suggestedQuestions.categories?.length, '–∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }

    setSearchIndex(searchIndex) {
        this.searchIndex = searchIndex;
        console.log('üîç –ò–Ω–¥–µ–∫—Å –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }

    updateSuggestedQuestions() {
        if (!this.suggestedQuestions) return;

        const suggestionsContainer = document.getElementById('chat-suggestions');
        if (!suggestionsContainer) return;

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–∞
        const quickQuestions = this.suggestedQuestions.quickQuestions?.slice(0, 4) || [];
        
        suggestionsContainer.innerHTML = quickQuestions.map(question => 
            `<button class="chat-suggestion" data-question="${question}">
                ${question}
            </button>`
        ).join('');

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        suggestionsContainer.querySelectorAll('.chat-suggestion').forEach(btn => {
            btn.addEventListener('click', () => {
                const question = btn.getAttribute('data-question');
                if (question && this.chatInput) {
                    this.chatInput.value = question;
                    this.sendMessage();
                }
            });
        });
    }

    async sendMessage() {
        const message = this.chatInput?.value.trim();
        if (!message) return;

        this.addMessage(message, 'user');
        this.chatInput.value = '';
        this.showTypingIndicator();

        try {
            const response = await this.generateResponse(message);
            this.hideTypingIndicator();
            this.addMessage(response, 'assistant');
        } catch (error) {
            this.hideTypingIndicator();
            this.addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'assistant');
            console.error('–û—à–∏–±–∫–∞ RAG —á–∞—Ç–∞:', error);
        }
    }

    async generateResponse(message) {
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        if (this.knowledgeBase?.demoResponses) {
            const lowerMessage = message.toLowerCase();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç—ã
            for (const [key, response] of Object.entries(this.knowledgeBase.demoResponses)) {
                if (lowerMessage.includes(key)) {
                    return response;
                }
            }
        }

        // –ü–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        if (this.knowledgeBase?.documents) {
            const relevantDoc = this.searchKnowledgeBase(message);
            if (relevantDoc) {
                return `${relevantDoc.content}\n\nüí° *–ò—Å—Ç–æ—á–Ω–∏–∫: ${relevantDoc.title}*`;
            }
        }

        // Fallback responses
        const fallbackResponses = [
            '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ Prompt Engineering, RAG —Å–∏—Å—Ç–µ–º–∞—Ö –∏ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö. –£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
            '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! –•–æ—Ç—è —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –Ω–µ—Ç, —è –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–º –æ–ø—ã—Ç–µ –∏–∑ –º–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.',
            '–ú–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏–∑ —Å—Ö–æ–∂–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ä–∞–±–æ—Ç–µ —Å Mistral API –∏–ª–∏ RAG —Å–∏—Å—Ç–µ–º–∞–º–∏ —è —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏.'
        ];

        return fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
    }

    searchKnowledgeBase(query) {
        if (!this.knowledgeBase?.documents) return null;

        const lowerQuery = query.toLowerCase();
        
        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        for (const doc of this.knowledgeBase.documents) {
            const hasKeywordMatch = doc.keywords?.some(keyword => 
                lowerQuery.includes(keyword.toLowerCase())
            );
            
            const hasContentMatch = doc.content?.toLowerCase().includes(lowerQuery.split(' ')[0]);
            
            if (hasKeywordMatch || hasContentMatch) {
                return doc;
            }
        }
        
        return null;
    }

    addMessage(content, sender) {
        if (!this.chatMessages) return;

        const messageEl = document.createElement('div');
        messageEl.className = `chat-message chat-message-enter ${sender === 'user' ? 'user' : ''}`;
        
        messageEl.innerHTML = `
            <div class="chat-message-avatar">${sender === 'user' ? '–í—ã' : 'AI'}</div>
            <div class="chat-message-content">
                <p>${content}</p>
                <div class="chat-message-time">${new Date().toLocaleTimeString()}</div>
            </div>
        `;

        this.chatMessages.appendChild(messageEl);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    showTypingIndicator() {
        if (!this.chatMessages) return;

        const typingEl = document.createElement('div');
        typingEl.className = 'chat-typing-indicator';
        typingEl.innerHTML = `
            <div class="chat-message-avatar">AI</div>
            <div class="chat-typing-dots">
                <div class="chat-typing-dot"></div>
                <div class="chat-typing-dot"></div>
                <div class="chat-typing-dot"></div>
            </div>
        `;

        this.chatMessages.appendChild(typingEl);
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    hideTypingIndicator() {
        const typingIndicator = this.chatMessages?.querySelector('.chat-typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }
}

// ===== –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –î–†–£–ì–ò–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í =====

class MultiagentVisualization {
    constructor() {
        console.log('ü§ñ MultiagentVisualization –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö
    }
}

class AIReadinessChecklist {
    constructor() {
        console.log('‚úÖ AIReadinessChecklist –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        // –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö
    }
}

class ProjectsManager {
    constructor() {
        this.projects = [];
        this.container = null;
        console.log('üèóÔ∏è ProjectsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setProjects(projects) {
        this.projects = projects;
        console.log('üöÄ –ü—Ä–æ–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', projects?.length, '–ø—Ä–æ–µ–∫—Ç–æ–≤');
    }

    render() {
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        if (!this.container) {
            this.container = document.getElementById('projects-grid');
            console.log('üîç –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä projects-grid:', !!this.container);
        }
        
        if (!this.container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä projects-grid –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        if (!this.projects || !this.projects.length) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º demo –¥–∞–Ω–Ω—ã–µ...');
            this.loadDemoProjects();
            return;
        }

        console.log('üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥', this.projects?.length || 0, '–ø—Ä–æ–µ–∫—Ç–æ–≤');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø 3 –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        const featuredProjects = (this.projects || []).filter(p => p?.featured).slice(0, 3);
        const projectsToShow = featuredProjects.length > 0 ? featuredProjects : (this.projects || []).slice(0, 3);

        this.container.innerHTML = projectsToShow.map((project, index) => {
            const projectType = this.getProjectType(project);
            const glowClass = this.getGlowClass(projectType);
            const gradientClass = this.getGradientClass(projectType);
            const iconName = this.getProjectIcon(projectType);
            
            return `
                <div class="project-card-interactive" data-aos="fade-up" data-aos-delay="${100 + index * 100}" data-project-id="${project.id}" data-project-type="${projectType}">
                    <div class="project-glow-effect ${glowClass}"></div>
                    
                    ${project.featured ? '<div class="project-featured-badge">Featured</div>' : ''}
                    
                    <div class="project-icon-container ${gradientClass}">
                        <i data-lucide="${iconName}"></i>
                        <div class="project-icon-pulse"></div>
                    </div>
                    
                    <div class="project-content-interactive">
                        <h3 class="project-title-interactive">${project.title}</h3>
                        <p class="project-subtitle-interactive">${project.subtitle}</p>
                        <p class="project-description-interactive">${project.description}</p>
                        
                        <div class="project-metrics-interactive">
                            ${(project.metrics || []).slice(0, 2).map(metric => `
                                <div class="project-metric-interactive">
                                    <span class="project-metric-value">${(metric || '').split(' ')[0] || ''}</span>
                                    <span class="project-metric-label">${(metric || '').split(' ').slice(1).join(' ')}</span>
                                </div>
                            `).join('')}
                        </div>
                        
                        <div class="project-tech-tags-interactive">
                            ${(project.technologies || []).slice(0, 4).map((tech, techIndex) => {
                                const techClass = this.getTechPillClass(tech, techIndex);
                                return `<span class="project-tech-pill ${techClass}">${tech || ''}</span>`;
                            }).join('')}
                        </div>
                        
                        <div class="project-actions-interactive">
                            <button class="project-btn-interactive primary" onclick="openProjectModal(${project.id})">
                                <i data-lucide="info" style="width: 16px; height: 16px;"></i>
                                –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                            </button>
                            
                            ${project.demo ? `
                                <a href="${project.demo}" class="project-btn-interactive secondary" target="_blank" rel="noopener noreferrer">
                                    <i data-lucide="external-link" style="width: 16px; height: 16px;"></i>
                                    –î–µ–º–æ
                                </a>
                            ` : ''}
                        </div>
                    </div>
                </div>
            `;
        }).join('');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }

        this.setupProjectInteractions();
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        if (window.interactiveEffects) {
            window.interactiveEffects.initMouseTrackingCards();
            window.interactiveEffects.initPulseAnimations();
        }
        
        console.log('‚úÖ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    }

    loadDemoProjects() {
        console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ–º demo –ø—Ä–æ–µ–∫—Ç—ã...');
        const demoProjects = [
            {
                id: 1,
                title: "Face-Swap Bot",
                subtitle: "Viral –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
                description: "Telegram-–±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–æ–≤ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π face-swap",
                technologies: ["Node.js", "Piapi AI", "Telegram Bot API", "Docker"],
                metrics: ["10K+ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞", "50+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
                featured: true,
                demo: "https://t.me/demo"
            },
            {
                id: 2,
                title: "–ù–µ–π—Ä–æ-–Æ—Ä–∏—Å—Ç",
                subtitle: "AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
                description: "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å Mistral API",
                technologies: ["Mistral API", "RAG", "Vector Database"],
                metrics: ["95% –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", "100+ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"],
                featured: true
            },
            {
                id: 3,
                title: "MCP Server",
                subtitle: "YClients Integration",
                description: "–ù–µ–π—Ä–æ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤",
                technologies: ["MCP Protocol", "YClients API", "Claude"],
                metrics: ["100% –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏", "24/7 —Ä–∞–±–æ—Ç–∞"],
                featured: true
            }
        ];
        
        this.projects = demoProjects;
        console.log('üöÄ Demo –ø—Ä–æ–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', demoProjects.length);
        this.render();
    }

    getProjectType(project) {
        const title = project.title.toLowerCase();
        if (title.includes('bot') || title.includes('telegram')) return 'bot';
        if (title.includes('ai') || title.includes('llm') || title.includes('–Ω–µ–π—Ä–æ')) return 'ai';
        if (title.includes('mcp') || title.includes('server') || title.includes('integration')) return 'integration';
        if (title.includes('rag') || title.includes('–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è')) return 'automation';
        return 'development';
    }

    getGlowClass(projectType) {
        const glowMap = {
            'bot': 'project-bot-glow',
            'ai': 'project-ai-glow',
            'integration': 'project-integration-glow',
            'automation': 'project-automation-glow',
            'development': 'project-development-glow'
        };
        return glowMap[projectType] || 'project-ai-glow';
    }

    getGradientClass(projectType) {
        const gradientMap = {
            'bot': 'project-bot-gradient',
            'ai': 'project-ai-gradient',
            'integration': 'project-integration-gradient',
            'automation': 'project-automation-gradient',
            'development': 'project-development-gradient'
        };
        return gradientMap[projectType] || 'project-ai-gradient';
    }

    getProjectIcon(projectType) {
        const iconMap = {
            'bot': 'message-circle',
            'ai': 'brain',
            'integration': 'plug',
            'automation': 'zap',
            'development': 'code'
        };
        return iconMap[projectType] || 'brain';
    }

    getTechPillClass(tech, index) {
        const techLower = tech.toLowerCase();
        
        // AI/LLM —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ - —Å–∏–Ω–∏–π
        if (techLower.includes('ai') || techLower.includes('api') || techLower.includes('gpt') || 
            techLower.includes('claude') || techLower.includes('mistral') || techLower.includes('openai') ||
            techLower.includes('piapi')) {
            return 'primary';
        }
        
        // –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤–µ–∫—Ç–æ—Ä—ã - –∑–µ–ª–µ–Ω—ã–π
        if (techLower.includes('vector') || techLower.includes('database') || techLower.includes('pinecone') ||
            techLower.includes('chroma') || techLower.includes('rag') || techLower.includes('langchain')) {
            return 'secondary';
        }
        
        // Integration –∏ MCP - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        if (techLower.includes('mcp') || techLower.includes('protocol') || techLower.includes('integration') ||
            techLower.includes('webhook') || techLower.includes('–±–∏—Ç—Ä–∏–∫—Å') || techLower.includes('yclients')) {
            return 'violet';
        }
        
        // Bot —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ - —Ä–æ–∑–æ–≤—ã–π
        if (techLower.includes('bot') || techLower.includes('telegram')) {
            return 'rose';
        }
        
        // Development - –æ—Ä–∞–Ω–∂–µ–≤—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        return 'accent';
    }

    setupProjectInteractions() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        document.querySelectorAll('.project-card-interactive').forEach(card => {
            card.addEventListener('click', (e) => {
                // –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
                if (e.target.closest('.project-btn-interactive') || e.target.closest('a')) return;
                
                const projectId = parseInt(card.getAttribute('data-project-id'));
                if (window.openProjectModal) {
                    window.openProjectModal(projectId);
                }
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ–µ–∫—Ç–æ–≤"
        const loadMoreBtn = document.getElementById('load-more-projects');
        if (loadMoreBtn) {
            loadMoreBtn.addEventListener('click', () => {
                this.showAllProjects();
            });
        }
    }

    showAllProjects() {
        if (!this.container || !this.projects.length) return;

        this.container.innerHTML = this.projects.map(project => `
            <div class="project-card" data-aos="fade-up" data-project-id="${project.id}">
                <div class="project-header">
                    <div>
                        <h3 class="project-title">${project.title}</h3>
                        <p class="project-subtitle">${project.subtitle}</p>
                    </div>
                    ${project.featured ? '<span class="project-status featured">Featured</span>' : ''}
                </div>
                
                <p class="project-description">${project.description}</p>
                
                <div class="project-technologies">
                    ${project.technologies.map(tech => 
                        `<span class="project-tech-tag">${tech}</span>`
                    ).join('')}
                </div>
                
                <div class="project-metrics">
                    ${project.metrics.slice(0, 2).map(metric => `
                        <div class="project-metric">
                            <span class="project-metric-value">${metric.split(' ')[0]}</span>
                            <span class="project-metric-label">${metric.split(' ').slice(1).join(' ')}</span>
                        </div>
                    `).join('')}
                </div>
                
                <div class="project-actions">
                    <button class="project-btn project-btn-primary" onclick="openProjectModal(${project.id})">
                        <i data-lucide="info" style="width: 16px; height: 16px;"></i>
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                    </button>
                    ${project.github ? `<a href="${project.github}" class="project-btn project-btn-outline" target="_blank">
                        <i data-lucide="github" style="width: 16px; height: 16px;"></i>
                        GitHub
                    </a>` : ''}
                    ${project.demo ? `<a href="${project.demo}" class="project-btn project-btn-outline" target="_blank">
                        <i data-lucide="external-link" style="width: 16px; height: 16px;"></i>
                        Demo
                    </a>` : ''}
                </div>
            </div>
        `).join('');

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
        const loadMoreBtn = document.getElementById('load-more-projects');
        if (loadMoreBtn) {
            loadMoreBtn.parentElement.style.display = 'none';
        }

        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }

        this.setupProjectInteractions();
    }
}

class SkillsManager {
    constructor() {
        this.skills = [];
        this.container = document.getElementById('skills-container');
    }

    setSkills(skills) {
        this.skills = skills;
        console.log('üéØ –ù–∞–≤—ã–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', skills?.length, '–∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }

    render() {
        if (!this.container || !this.skills.length) return;

        this.container.innerHTML = `
            <div class="skills-grid">
                ${this.skills.map(category => `
                    <div class="skill-category" data-aos="fade-up">
                        <h3 class="skill-category-title">
                            <i data-lucide="${category.icon}" class="skill-category-icon"></i>
                            ${category.category}
                        </h3>
                        <div class="skills-list">
                            ${category.skills.map(skill => `
                                <div class="skill-item">
                                    <div class="skill-info">
                                        <span class="skill-name">${skill.name}</span>
                                        <span class="skill-level">${skill.level}</span>
                                    </div>
                                    <div class="skill-progress">
                                        <div class="skill-progress-bar" style="width: ${skill.progress}%"></div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `).join('')}
            </div>
        `;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏
        if (typeof lucide !== 'undefined') {
            lucide.createIcons();
        }
    }
}

class UtilsHelper {
    constructor() {
        console.log('üõ†Ô∏è UtilsHelper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    static formatDate(date) {
        return new Intl.DateTimeFormat('ru-RU').format(new Date(date));
    }

    static debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    static throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
}

// ===== MODAL FUNCTIONS =====

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
function openProjectModal(projectId) {
    const app = window.webResumeApp;
    const project = app.components.projectsManager.projects.find(p => p.id === projectId);
    
    if (!project) return;

    const modal = document.getElementById('project-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalBody = document.getElementById('modal-body');

    modalTitle.textContent = project.title;
    modalBody.innerHTML = `
        <div class="project-modal-content">
            <div class="project-modal-image">
                <i data-lucide="image" style="font-size: 3rem; opacity: 0.3;"></i>
                <div style="position: absolute; bottom: 10px; right: 10px; background: var(--primary-500); color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px;">
                    ${project.subtitle}
                </div>
            </div>
            
            <div>
                <h4 style="color: var(--dark-50); margin-bottom: var(--space-3);">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</h4>
                <p style="color: var(--dark-300); line-height: 1.6; margin-bottom: var(--space-4);">
                    ${project.description}
                </p>
            </div>

            <div>
                <h4 style="color: var(--dark-50); margin-bottom: var(--space-3);">–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</h4>
                <ul class="project-modal-features">
                    ${project.features.map(feature => `<li>${feature}</li>`).join('')}
                </ul>
            </div>

            <div>
                <h4 style="color: var(--dark-50); margin-bottom: var(--space-3);">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</h4>
                <div class="project-technologies" style="margin-bottom: var(--space-4);">
                    ${project.technologies.map(tech => 
                        `<span class="project-tech-tag">${tech}</span>`
                    ).join('')}
                </div>
            </div>

            <div>
                <h4 style="color: var(--dark-50); margin-bottom: var(--space-3);">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –º–µ—Ç—Ä–∏–∫–∏</h4>
                <div class="project-metrics" style="grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));">
                    ${project.metrics.map(metric => `
                        <div class="project-metric">
                            <span class="project-metric-value">${metric.split(' ')[0]}</span>
                            <span class="project-metric-label">${metric.split(' ').slice(1).join(' ')}</span>
                        </div>
                    `).join('')}
                </div>
            </div>

            <div class="project-actions" style="justify-content: center; margin-top: var(--space-6);">
                ${project.github ? `<a href="${project.github}" class="project-btn project-btn-primary" target="_blank">
                    <i data-lucide="github" style="width: 16px; height: 16px;"></i>
                    –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–¥
                </a>` : ''}
                ${project.demo ? `<a href="${project.demo}" class="project-btn project-btn-outline" target="_blank">
                    <i data-lucide="external-link" style="width: 16px; height: 16px;"></i>
                    –û—Ç–∫—Ä—ã—Ç—å –¥–µ–º–æ
                </a>` : ''}
            </div>
        </div>
    `;

    modal.classList.add('active');
    document.body.style.overflow = 'hidden';

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }
}

function closeProjectModal() {
    const modal = document.getElementById('project-modal');
    modal.classList.remove('active');
    document.body.style.overflow = '';
}

function openContactModal() {
    const modal = document.getElementById('contact-modal');
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
}

function closeContactModal() {
    const modal = document.getElementById('contact-modal');
    modal.classList.remove('active');
    document.body.style.overflow = '';
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    const form = document.getElementById('contact-form');
    const successDiv = document.getElementById('contact-success');
    
    if (form) form.style.display = 'block';
    if (successDiv) successDiv.style.display = 'none';
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    if (form) form.reset();
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏
    document.querySelectorAll('.error-message').forEach(error => {
        error.classList.remove('show');
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–≤ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal-overlay')) {
            closeProjectModal();
            closeContactModal();
        }
        
        if (e.target.classList.contains('modal-close') || e.target.closest('.modal-close')) {
            closeProjectModal();
            closeContactModal();
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–≤ –ø–æ Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeProjectModal();
            closeContactModal();
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    const contactForm = document.getElementById('contact-form');
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            const name = document.getElementById('contact-name');
            const email = document.getElementById('contact-email');
            const message = document.getElementById('contact-message');
            
            let isValid = true;
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
            document.querySelectorAll('.error-message').forEach(error => {
                error.classList.remove('show');
            });
            
            if (!name.value.trim()) {
                document.getElementById('name-error').textContent = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
                document.getElementById('name-error').classList.add('show');
                isValid = false;
            }
            
            if (!email.value.trim() || !email.value.includes('@')) {
                document.getElementById('email-error').textContent = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
                document.getElementById('email-error').classList.add('show');
                isValid = false;
            }
            
            if (!message.value.trim()) {
                document.getElementById('message-error').textContent = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
                document.getElementById('message-error').classList.add('show');
                isValid = false;
            }
            
            if (isValid) {
                // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                setTimeout(() => {
                    contactForm.style.display = 'none';
                    document.getElementById('contact-success').style.display = 'block';
                }, 1000);
            }
        });
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.openProjectModal = openProjectModal;
window.closeProjectModal = closeProjectModal;
window.openContactModal = openContactModal;
window.closeContactModal = closeContactModal;

// ===== –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –≠–§–§–ï–ö–¢–´ –î–õ–Ø –ö–ê–†–¢–û–ß–ï–ö –≠–ö–°–ü–ï–†–¢–ò–ó–´ =====

class InteractiveEffects {
    constructor() {
        this.init();
    }

    init() {
        this.initMouseTrackingCards();
        this.initPulseAnimations();
        this.initTechStackInteractions();
        console.log('üé≠ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    initMouseTrackingCards() {
        // Mouse tracking –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
        const expertiseCards = document.querySelectorAll('.expertise-card-compact');
        
        expertiseCards.forEach(card => {
            const cardGlow = card.querySelector('.card-glow-effect');
            
            if (cardGlow) {
                card.addEventListener('mousemove', (e) => {
                    const rect = card.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;
                    
                    cardGlow.style.setProperty('--mouse-x', `${x}px`);
                    cardGlow.style.setProperty('--mouse-y', `${y}px`);
                });
                
                card.addEventListener('mouseleave', () => {
                    cardGlow.style.removeProperty('--mouse-x');
                    cardGlow.style.removeProperty('--mouse-y');
                });
            }
        });

        // Mouse tracking –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        const projectCards = document.querySelectorAll('.project-card-interactive');
        
        projectCards.forEach(card => {
            const cardGlow = card.querySelector('.project-glow-effect');
            
            if (cardGlow) {
                card.addEventListener('mousemove', (e) => {
                    const rect = card.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;
                    
                    cardGlow.style.setProperty('--mouse-x', `${x}px`);
                    cardGlow.style.setProperty('--mouse-y', `${y}px`);
                });
                
                card.addEventListener('mouseleave', () => {
                    cardGlow.style.removeProperty('--mouse-x');
                    cardGlow.style.removeProperty('--mouse-y');
                });
            }
        });
    }

    initPulseAnimations() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è pulse –∞–Ω–∏–º–∞—Ü–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
        const expertisePulseElements = document.querySelectorAll('.icon-pulse');
        
        expertisePulseElements.forEach((element, index) => {
            element.style.animationDelay = `${index * 0.7}s`;
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è pulse –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–æ–≤
        const projectPulseElements = document.querySelectorAll('.project-icon-pulse');
        
        projectPulseElements.forEach((element, index) => {
            element.style.animationDelay = `${index * 1.2}s`;
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å hover —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
    initTechStackInteractions() {
        const techChips = document.querySelectorAll('.tech-chip');
        
        techChips.forEach(chip => {
            chip.addEventListener('mouseenter', () => {
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π glow —ç—Ñ—Ñ–µ–∫—Ç
                if (chip.classList.contains('featured')) {
                    chip.style.boxShadow = '0 12px 30px rgba(59, 130, 246, 0.5)';
                } else {
                    chip.style.boxShadow = '0 8px 20px rgba(59, 130, 246, 0.2)';
                }
            });
            
            chip.addEventListener('mouseleave', () => {
                // –£–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                chip.style.boxShadow = '';
            });
        });
    }
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.webResumeApp = new WebResumeApp();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
document.addEventListener('DOMContentLoaded', () => {
    const interactiveEffects = new InteractiveEffects();
    window.interactiveEffects = interactiveEffects;
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
        if (window.webResumeApp && window.webResumeApp.components.projectsManager) {
            const projectsManager = window.webResumeApp.components.projectsManager;
            if (!projectsManager.projects || !projectsManager.projects.length) {
                console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ demo –ø—Ä–æ–µ–∫—Ç–æ–≤...');
                projectsManager.loadDemoProjects();
            } else {
                console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥...');
                projectsManager.render();
            }
        }
    }, 1000);
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.WebResumeComponents = {
    RAGChatComponent,
    MultiagentVisualization,
    AIReadinessChecklist,
    ProjectsManager,
    SkillsManager,
    UtilsHelper
};
